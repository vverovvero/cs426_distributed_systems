Lab4, Wendy Chen															12/2016


Implementation details for lab4:

We expect partition number to start at 1.

Can hold up to 9 partitions.  We expect testing to happen with 3.
The partition array always contains nothing in the 0th slot.
rpc_server_port addresses are added to the array by the partition number.

We expect the command line invocation to always be of form:
$ ./cs426_graph_server <graph_server_port> -p <partnum> -l <partlist> 

Example:
$ ./cs426_graph_server 7080 -p 1 -l 104.154.145.208:8080 104.154.198.82:8090 104.197.167.77:9000


Partition checking happens in add_edge and get_edge, as specified by spec.
Although it is noted that illegal requests will not be made, to be safe, we also
include partition checking in all graph methods.
We introduce a 400 Bad Request error if an illegal request
is made to a partition.

Commands add_edge and get_edge involve RPC calls.  First, the lower number
partition is locked (ie. the partition to which the request was sent).
RPC calls are made to determine whether the nodes involved exist on their respective partitions,
and if they are neighbors of each other.

Then, an RPC call is made to the higher partition.  The higher partition acquires
its lock, mutates the graph, unlocks, and returns.  

Lastly, the lower number partition mutates the graph, then forfeits the lock.
This way, we always guarantee that all partitions involved are locked during
the mutations of both graphs.


